from datetime import datetime
from selenium import webdriver
import os
import shutil
import time
import logging
from allure_reporter.allure import Report
import allure
from allure_commons.types import AttachmentType

SCREENSHOT_DIR = "screenshots"


def before_all(context):
    print("Executing before all")

    browser_type = "chrome"
    base_url = "https://mytests.ru"
    report_dir_name = "allure-report"

    context.allure = Report(report_dir_name, "Tests Dispatch system", browser_type, base_url, re_create=True)


def before_feature(context, feature):
    context.allure.before_feature(feature)
    print("Before feature\n")
    # Create logger
    # TODO - http://stackoverflow.com/questions/6386698/using-the-logging-python-class-to-write-to-a-file
    context.logger = logging.getLogger('behave_tests')
    hdlr = logging.FileHandler('./behave_tests.log')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    context.logger.addHandler(hdlr)
    context.logger.setLevel(logging.DEBUG)


# Scenario level objects are popped off context when scenario exits

def before_scenario(context, scenario):
    context.allure.before_scenario(scenario)
    print("User data:", context.config.userdata)
    # behave -D BROWSER=chrome
    if 'BROWSER' in context.config.userdata.keys():
        if context.config.userdata['BROWSER'] is None:
            BROWSER = 'chrome'
        else:
            BROWSER = context.config.userdata['BROWSER']
    else:
        BROWSER = 'chrome'
    # For some reason, python doesn't have switch case -
    # http://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python
    if BROWSER == 'chrome':
        context.browser = webdriver.Chrome()
    elif BROWSER == 'firefox':
        context.browser = webdriver.Firefox()
    elif BROWSER == 'safari':
        context.browser = webdriver.Safari()
    elif BROWSER == 'ie':
        context.browser = webdriver.Ie()
    elif BROWSER == 'opera':
        context.browser = webdriver.Opera()
    elif BROWSER == 'phantomjs':
        context.browser = webdriver.PhantomJS()
    else:
        print("Browser you entered:", BROWSER, "is invalid value")

    context.browser.maximize_window()
    print("Before scenario\n")


def before_step(context, step):
    context.allure.before_step(step)


def after_step(context, step):
    context.allure.after_step(step, get_attachments())


def after_scenario(context, scenario):
    print(">>> after_scenario")
    # print(">>> scenario status" + scenario.status)
    context.allure.after_scenario(scenario)
    if scenario.status == "failed":
        # if not os.path.exists(SCREENSHOT_DIR):
        #     os.makedirs(SCREENSHOT_DIR)
        # os.chdir(SCREENSHOT_DIR)
        # context.browser.save_screenshot(scenario.name + "_failed.png")

        now = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        # namefile = f"screenshot-{now}.png"
        # context.browser.get_screenshot_as_file(namefile)

        print(f"take Screenshot-{now}")
        allure.attach(context.browser.get_screenshot_as_png(), name=f"Screenshot-{now}", attachment_type=AttachmentType.PNG)

    context.browser.quit()  # ??


def after_feature(context, feature):
    print("\nAfter Feature")


def after_all(context):
    context.allure.after_all()
    print("User data:", context.config.userdata)
    # behave -D ARCHIVE=Yes
    if 'ARCHIVE' in context.config.userdata.keys():
        if os.path.exists(SCREENSHOT_DIR):
            os.rmdir(SCREENSHOT_DIR)
            os.makedirs(SCREENSHOT_DIR)
        if context.config.userdata['ARCHIVE'] == "Yes":
            shutil.make_archive(
                time.strftime("%d_%m_%Y"),
                'zip',
                "screenshots")
            # os.rmdir(SCREENSHOT_DIR)
            print("Executing after all")


def get_attachments():
    # attachments = [{"title": "My attachment file1", "filename": "b716cbcc-fc87-47e5-b188-5cd001b7e179.txt"},
    #                {"title": "My attachment file2", "filename": "b83f9742-aeab-4044-aca0-3e2456b957e3.jpg"}]
    attachments = []

    return attachments
